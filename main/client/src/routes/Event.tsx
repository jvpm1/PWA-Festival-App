import { Component, For, createSignal, createMemo } from "solid-js";
import TitleComponent from "../components/Title";
import { EventData, EventType, GetDay } from "../assets/db/Database";

interface EventDay {
  lowestUnixTime: null | number;
  highestUnixTime: null | number;
  events: any;
}

// Define the event interface based on the new structure
interface Event {
  title: string;
  location: string;
  desc: null | string;
  img?: any;
  beginDate: Date;
  endDate: Date;
}

const hourSize = 200;

let formatedEvents: Record<string, EventDay> = {};

const Event: Component = () => {
  const [currentDay, setDay] = createSignal<number>(0);

  // Extract all events from all EventType objects
  const getAllEvents = (): Event[] => {
    return EventData.flatMap((eventType: EventType) => eventType.events);
  };

  const initDates = () => {
    // Reset formatted events
    formatedEvents = {};

    // Gets the lowest and highest unix out of Events, and also organizes them by day
    const allEvents = getAllEvents();

    allEvents.forEach((event: Event) => {
      const unixBeginTime = event.beginDate.getTime();
      const unixEndTime = event.endDate.getTime();

      // Creates eventDay
      const day = event.beginDate.getDay();
      if (!formatedEvents[day]) {
        formatedEvents[day] = {
          lowestUnixTime: null,
          highestUnixTime: null,
          events: {},
        } as EventDay;
      }

      // Creates location if it doesn't exist
      const eventDay = formatedEvents[day];
      const location = event.location;
      if (!eventDay.events[location]) {
        eventDay.events[location] = [];
      }

      if (
        eventDay.lowestUnixTime == null ||
        unixBeginTime < eventDay.lowestUnixTime
      ) {
        eventDay.lowestUnixTime = unixBeginTime;
      }

      if (
        eventDay.highestUnixTime == null ||
        unixEndTime > eventDay.highestUnixTime
      ) {
        eventDay.highestUnixTime = unixEndTime;
      }

      eventDay.events[location].push(event);
    });
  };

  initDates();

  const formatTime = (date: Date) => {
    // Generated by claude
    return `${date.getHours()}:${date
      .getMinutes()
      .toString()
      .padStart(2, "0")}`;
  };

  const getEventPosition = (event: Event, eventDay: EventDay) => {
    // I still hate math :(
    const startingDate = new Date(eventDay.lowestUnixTime!);
    if (!startingDate) return { left: 0, width: hourSize };

    const eventStartDate = event.beginDate;
    const eventEndDate = event.endDate;

    const unixDiff = eventStartDate.getTime() - startingDate.getTime();
    const hoursDiff = unixDiff / (1000 * 60 * 60);
    const leftPosition = hoursDiff * hourSize;

    const eventUnixDuration = eventEndDate.getTime() - eventStartDate.getTime();
    const hoursDuration = eventUnixDuration / (1000 * 60 * 60);
    const eventWidth = hoursDuration * hourSize;

    return {
      left: leftPosition,
      width: eventWidth,
    };
  };

  const getTimeline = createMemo(() => {
    const eventDay = formatedEvents[currentDay()] as EventDay;
    if (!eventDay) {
      return [];
    }

    const timeline: Array<Date> = [];
    const start = new Date(eventDay.lowestUnixTime!);
    const end = new Date(eventDay.highestUnixTime!);

    for (let num = 0; num < end.getHours() + 1 - start.getHours(); num++) {
      const date = new Date(start);
      date.setHours(start.getHours() + num);
      timeline.push(date);
    }

    return timeline;
  });

  const getDays = createMemo(() => {
    return Object.keys(formatedEvents)
      .map((day) => parseInt(day))
      .sort((a, b) => b - a);
  });

  const getEvents = createMemo(() => {
    return formatedEvents[currentDay()] || {};
  });

  return (
    <div class="w-full h-full flex flex-col gap-4 pt-4">
      <nav class="w-full h-fit px-4 space-y-4">
        <TitleComponent children="Events" />

        <div class="w-full h-fit flex justify-between gap-2 overflow-x-auto">
          <For each={getDays()}>
            {(dayNumber) => (
              <button
                class={`p-2 w-full min-w-fit rounded-3xl transition-colors ${
                  currentDay() === dayNumber
                    ? "bg-accent text-white"
                    : "bg-primary-container-bg dark:bg-primary-container-bg-dark border border-primary-border dark:border-primary-border-dark text-primary-text dark:text-primary-text-dark hover:bg-accent hover:text-white"
                }`}
                onClick={() => setDay(dayNumber)}
              >
                {GetDay(dayNumber)}
              </button>
            )}
          </For>
        </div>
      </nav>

      <div class="w-full h-full flex flex-col">
        <section class="w-full h-full overflow-auto hide-scroll rounded-t-4xl transition-all">
          <div class="flex flex-col min-w-fit">
            <section class="flex">
              <div class="w-32 h-fill bg-accent text-white flex items-center justify-center">
                <p class="font-medium text-sm">Location</p>
              </div>
              <For each={getTimeline()}>
                {(timeSlot) => (
                  <div
                    class="bg-accent text-white flex items-center justify-start p-4"
                    style={`width: ${hourSize}px; height: 60px`}
                  >
                    <p class="font-medium">{formatTime(timeSlot)}</p>
                  </div>
                )}
              </For>
            </section>

            <section class="flex flex-col">
              <For each={Object.keys(getEvents().events || {})}>
                {(location) => (
                  <div
                    class="relative border-b border-primary-border dark:border-primary-border-dark h-24 flex items-center"
                    style={`width: ${
                      32 * 4 + getTimeline().length * hourSize
                    }px`}
                  >
                    <div class="w-32 h-full flex justify-between bg-primary-container-bg dark:bg-primary-container-bg-dark items-center p-4 text-primary-text dark:text-primary-text-dark border-r border-primary-border dark:border-primary-border-dark">
                      <p class="text-md font-medium">{location}</p>
                    </div>
                    <div class="relative flex-1 h-full">
                      <For each={getEvents().events?.[location] || []}>
                        {(event) => {
                          const eventDay = formatedEvents[
                            currentDay()
                          ] as EventDay;
                          const position = getEventPosition(event, eventDay);

                          return (
                            <div
                              class="absolute top-2 bottom-2 bg-primary-container-bg dark:bg-primary-container-bg-dark rounded-xl p-3 flex flex-col justify-center border border-primary-border dark:border-primary-border-dark"
                              style={`left: ${position.left}px; width: ${position.width}px;`}
                            >
                              <p class="text-primary-text dark:text-primary-text-dark text-sm font-semibold truncate">
                                {event.title}
                              </p>
                              <p class="text-secondary-text dark:text-secondary-text-dark text-xs truncate">
                                {formatTime(event.beginDate)} -{" "}
                                {formatTime(event.endDate)}
                              </p>
                            </div>
                          );
                        }}
                      </For>
                    </div>
                  </div>
                )}
              </For>
            </section>
          </div>
        </section>
      </div>
    </div>
  );
};

export default Event;
