import { Component, For } from "solid-js";
import TitleComponent from "../components/Title";

interface Event {
  title: string;
  location: string;
  desc: null | any;
  beginDate: Date;
  endDate: Date;
}

// REMOVE WHEN PROPER EVENTS ARRAY LOADING HAS BEEN ADDED
function tempEventMaking(hour: any, min: any) {
  let date = new Date();
  date.setHours(hour, min);
  return date;
}

const hourSize = 200;

let startingDate: null | Date = null;
let endingDate: null | Date = null;

let groupedEvents: Record<string, Event[]> = {};
let events: Array<Event> = [
  {
    title: "Armin van Buuren",
    location: "Poton",
    desc: null,
    beginDate: tempEventMaking(10, 30),
    endDate: tempEventMaking(11, 45),
  },
  {
    title: "Kensington",
    location: "Poton",
    desc: null,
    beginDate: tempEventMaking(12, 30),
    endDate: tempEventMaking(13, 45),
  },
  {
    title: "De Staat",
    location: "Poton",
    desc: null,
    beginDate: tempEventMaking(14, 30),
    endDate: tempEventMaking(16, 15),
  },
  {
    title: "Navarone",
    location: "Poton",
    desc: null,
    beginDate: tempEventMaking(17, 0),
    endDate: tempEventMaking(18, 15),
  },
  {
    title: "Dotan",
    location: "Poton",
    desc: null,
    beginDate: tempEventMaking(19, 15),
    endDate: tempEventMaking(21, 0),
  },
  {
    title: "Froukje",
    location: "Poton",
    desc: null,
    beginDate: tempEventMaking(22, 0),
    endDate: tempEventMaking(23, 45),
  },
];

const Event: Component = () => {
  const initDates = () => {
    let lowestUnixTime: number | null = null;
    let highestUnixTime: number | null = null;

    // Gets the lowest and highest unix out of events
    events.forEach((event: Event) => {
      const unixBeginTime = event.beginDate.getTime();
      if (lowestUnixTime == null || unixBeginTime < lowestUnixTime) {
        lowestUnixTime = unixBeginTime;
      }

      const unixEndTime = event.endDate.getTime();
      if (highestUnixTime == null || unixEndTime > highestUnixTime) {
        highestUnixTime = unixEndTime;
      }

      if (!groupedEvents[event.location]) {
        groupedEvents[event.location] = [];
      }

      groupedEvents[event.location].push(event);
    });

    // Convert unix time to Date() format
    const lowestDate = new Date(lowestUnixTime!);
    const highestDate = new Date(highestUnixTime!);

    // Sets up format
    lowestDate.setMinutes(0, 0, 0);
    highestDate.setMinutes(0, 0, 0);

    startingDate = lowestDate;
    endingDate = highestDate;
  };

  initDates();

  const generateTimeline = () => {
    const timeline: Array<Date> = [];
    const start = new Date(startingDate!);
    const end = new Date(endingDate!);

    for (let num = 0; num < end.getHours() + 1 - start.getHours(); num++) {
      const date = new Date(start);
      date.setHours(start.getHours() + num);
      timeline.push(date);
    }

    return timeline;
  };

  const timelineSlots = generateTimeline();

  const formatTime = (date: Date) => {
    // Generated by claude
    return `${date.getHours()}:${date
      .getMinutes()
      .toString()
      .padStart(2, "0")}`;
  };

  const getEventPosition = (event: Event) => {
    if (!startingDate) return { left: 0, width: hourSize };

    const eventStartDate = event.beginDate;
    const eventEndDate = event.endDate;

    // I hate math - Jos
    const unixDiff = eventStartDate.getTime() - startingDate.getTime();
    const hoursDiff = unixDiff / (1000 * 60 * 60);

    const eventUnixDuration = eventEndDate.getTime() - eventStartDate.getTime();
    const hoursDuration = eventUnixDuration / (1000 * 60 * 60);

    return {
      left: hoursDiff * hourSize,
      width: hoursDuration * hourSize,
    };
  };

  return (
    <div class="w-full h-full flex flex-col gap-4 pt-4">
      <nav class="w-full h-fit px-4 space-y-4">
        <TitleComponent children="Events" />

        <div class="w-full h-fit flex justify-between gap-2">
          {/* Selected */}
          <button class="p-2 w-full rounded-3xl bg-accent text-white">
            Zaterdag
          </button>

          {/* Not Selected */}
          <button class="p-2 w-full rounded-3xl bg-primary-container-bg dark:bg-primary-container-bg-dark border border-primary-border dark:border-primary-border-dark text-primary-text dark:text-primary-text-dark">
            Zondag
          </button>
        </div>
      </nav>

      <div class="w-full h-full flex flex-col px-4">
        <section class="w-full h-full overflow-auto hide-scroll rounded-4xl">
          <div class="flex flex-col min-w-fit">
            <section class="flex">
              <div class="w-32 h-fill bg-accent text-white flex items-center justify-center">
                <p class="font-medium text-sm">Location</p>
              </div>
              <For each={timelineSlots}>
                {(timeSlot) => (
                  <div
                    class="bg-accent text-white flex items-center justify-start p-4"
                    style={`width: ${hourSize}px; height: 60px`}
                  >
                    <p class="font-medium">{formatTime(timeSlot)}</p>
                  </div>
                )}
              </For>
            </section>

            <section class="flex flex-col">
              <For each={Object.keys(groupedEvents)}>
                {(location) => (
                  <div
                    class="relative border-b border-primary-border dark:border-primary-border-dark h-24 flex"
                    style={`width: ${
                      32 * 4 + timelineSlots.length * hourSize
                    }px`}
                  >
                    <div class="w-32 h-full flex justify-between items-center p-4  text-primary-text dark:text-primary-text-dark">
                      <p class="text-md font-medium">{location}</p>
                    </div>
                    <div class="relative flex-1">
                      <For each={groupedEvents[location]}>
                        {(event: Event) => {
                          const position = getEventPosition(event);
                          return (
                            <div
                              class="absolute top-2 bottom-2 bg-primary-container-bg dark:bg-primary-container-bg-dark rounded-2xl p-4 flex flex-col justify-center border border-primary-border dark:border-primary-border-dark"
                              style={`left: ${position.left}px; width: ${position.width}px`}
                            >
                              <p class="text-primary-text dark:text-primary-text-dark text-sm font-medium truncate">
                                {event.title}
                              </p>

                              <p class="text-secondary-text dark:text-secondary-text-dark text-xs truncate">
                                {formatTime(event.beginDate)} -{" "}
                                {formatTime(event.endDate)}
                              </p>
                            </div>
                          );
                        }}
                      </For>
                    </div>
                  </div>
                )}
              </For>
            </section>
          </div>
        </section>
      </div>
    </div>
  );
};

export default Event;
